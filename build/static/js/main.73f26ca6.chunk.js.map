{"version":3,"sources":["components/TableCell.jsx","components/TableRow.jsx","components/Table.jsx","index.js"],"names":["TableCell","props","onClick","handleApplyColor","TableRow","state","data","this","cells","i","numCols","push","Component","Table","addRow","setState","numRows","addCol","minusRow","minusCol","handleColorChange","event","selectedColor","target","value","style","backgroundColor","handleClearAll","clearAllCells","getAllCells","body","table","current","children","Array","from","map","tr","flat","forEach","cell","fillAllCells","fillUncoloredCells","React","createRef","clearAll","rows","id","onChange","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73f26ca6.chunk.js","sourcesContent":["function TableCell(props) {\n  return <td onClick={props.handleApplyColor}></td>;\n}\n\nexport default TableCell;\n","import TableCell from \"./TableCell\";\nimport React, { Component } from \"react\";\n\nclass TableRow extends Component {\n  constructor(props) {\n    super();\n    this.state =\n      {\n        data: \"HIHIHIH\"\n      };\n  }\n  render() {\n    this.cells = [];\n\n    for (let i = 0; i < this.props.numCols; i++) {\n      this.cells.push(<TableCell key={i} handleApplyColor={this.props.handleApplyColor} />);\n    }\n    return <tr>{this.cells}</tr>;\n  }\n}\n\nexport default TableRow;\n","import React, { Component } from \"react\";\nimport TableRow from './TableRow.jsx';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.table = React.createRef();\n    this.state =\n      {\n        numRows: 1,\n        numCols: 1,\n        selectedColor: 'red',\n        clearAll: false,\n      };\n    this.rows = [];\n  }\n\n  addRow = () => this.setState({ numRows: this.state.numRows + 1 })\n  addCol = () => this.setState({ numCols: this.state.numCols + 1 })\n  minusRow = () => {\n    if (this.state.numRows > 0) {\n      this.setState({ numRows: this.state.numRows - 1 });\n    }\n  }\n  minusCol = () => {\n    if (this.state.numCols > 0) {\n      this.setState({ numCols: this.state.numCols - 1 });\n    }\n  }\n  handleColorChange = (event) => {\n    this.setState({ selectedColor: event.target.value });\n  }\n\n  handleApplyColor = (event) => {\n    event.target.style.backgroundColor = this.state.selectedColor;\n\n  }\n\n  handleClearAll = (event) => {\n    this.clearAllCells();\n  }\n\n  getAllCells = () => {\n    let body = this.table.current.children[0];\n    return Array.from(body.children)\n      .map(tr => Array.from(tr.children))\n      .flat();\n  }\n\n  clearAllCells = () => {\n    this.getAllCells().forEach(cell => cell.style.backgroundColor = \"\");\n  }\n\n  fillAllCells = () => {\n    this.getAllCells().forEach(cell => cell.style.backgroundColor = this.state.selectedColor);\n  }\n\n  fillUncoloredCells = () => {\n    this.getAllCells().forEach(cell => {\n      if (cell.style.backgroundColor === \"\")\n        cell.style.backgroundColor = this.state.selectedColor;\n    });\n  }\n\n  render() {\n    this.rows = [];\n    for (let i = 0; i < this.state.numRows; i++) {\n      this.rows.push(<TableRow key={i} numCols={this.state.numCols} handleApplyColor={this.handleApplyColor} />);\n    }\n    return (\n      <div id=\"container\">\n        <h1> Pixelate </h1>\n        <div id=\"row-button\">\n          Rows\n          <button onClick={this.addRow}> + </button>\n          <button onClick={this.minusRow}> - </button>\n        </div>\n        <div id=\"col-button\">\n          Cols\n           <button onClick={this.addCol}> + </button>\n          <button onClick={this.minusCol}> - </button>\n        </div>\n        <div>\n          <button onClick={this.handleClearAll}> Clear All </button>\n          <button onClick={this.fillAllCells}> Fill All </button>\n          <button onClick={this.fillUncoloredCells}> Fill Uncolored </button>\n        </div>\n        <select onChange={this.handleColorChange}>\n          <option value=\"red\">Red</option>\n          <option value=\"blue\">Blue</option>\n          <option value=\"yellow\">Yellow</option>\n          <option value=\"purple\">Purple</option>\n          <option value=\"green\">Green</option>\n          <option value=\"orange\">Orange</option>\n          <option value=\"white\">White</option>\n        </select>\n        <div>\n          <table id=\"cells\" ref={this.table}>\n            <tbody>\n              {this.rows}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Table from './components/Table';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Table />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}